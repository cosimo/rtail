#!/usr/bin/perl
#
# Awesome remote log tailer
#

use strict;
use warnings;
use 5.010;

use File::Basename ();
use Getopt::Long   ();
use Pod::Usage     ();
use Time::HiRes    ();

use POE;
use POE qw(Wheel::FollowTail Wheel::Run Filter::Line Driver::SysRW);
use Term::Visual;

use constant {
    INITIAL_TAIL_LINES  => 100,
    PRINT_BUFFER_SIZE   => 200,
    SCREEN_UPDATE_DELAY => 0.2,
};

Getopt::Long::GetOptions(
    'file=s'                => \my @files,
    'grep:s'                => \(my $search_pattern = undef),
    'sshuser|user:s'        => \(my $ssh_user = 'root'),
    'initial-lines|lines:i' => \(my $initial_lines = INITIAL_TAIL_LINES),
);

if (!@files) {
    Pod::Usage::pod2usage(-verbose => 2);
}

@files = split m{\s*,\s*} => join(',', @files);

# -------------------------------------------------- Term::Visual setup

my $vt = Term::Visual->new(Alias => "interface");

$vt->set_palette(
    mycolor       => "magenta on black",
    statcolor     => "green on black",
    sockcolor     => "cyan on black",
    ncolor        => "low white on black",
    st_frames     => "bright cyan on blue",
    st_values     => "bright white on blue",
    stderr_bullet => "bright white on red",
    stderr_text   => "bright yellow on black",
    err_input     => "bright white on red",
    help          => "white on black",
    help_cmd      => "bright white on black"
);

my $window_id = $vt->create_window(
    Window_Name => "logmon",
    Status      => {
        0 => {
                  format => "\0(st_frames)" . " ["
                . "\0(st_values)" . "%8.8s"
                . "\0(st_frames)" . "] "
                . "\0(st_values)"
                . "%s [%s]"
                . "                         ",    # Cleans shorter searches
            fields => [qw( time name grep )]
        },
        1 => {
            format => " Observing: %s",
            fields => [qw( file )]
        },
    },
    Buffer_Size  => 50000,
    History_Size => 100,
    Title        => "System Log Monitor"
);

POE::Session->create(
    inline_states => {
        _start => \&start_guts,

        # For POE::Wheel::FollowTail
        got_term_input => \&handle_term_input,
        update_time    => \&update_time,
        update_status  => \&update_status,
        update_file    => \&update_file,
        input_tail     => \&input_tail,

        # For POE::Wheel::Run
        got_child_stdout => \&on_child_stdout,
        got_child_stderr => \&on_child_stderr,
        got_child_close  => \&on_child_close,
        got_child_signal => \&on_child_signal,
    }
);

# What to do when a remote file is requested
sub ssh_tail_file {
    my ($host, $path) = @_;

    my @cmd = (
        "/usr/bin/ssh", "$ssh_user\@$host", "/usr/bin/tail", "-n$initial_lines", "-F",
        $path,
    );

    return @cmd;
}

sub shorten_filename (;$) {
    if (m{([^\.:]+) (?: \.? [^:]+)? : (.+)}x) {
        $1 . ":" . File::Basename::basename($2);
    }
    else {
        File::Basename::basename($_);
    }
}

# --------------------------------------------- POE::Wheel::FollowTail mechanics

sub start_guts {
    my ($kernel, $heap) = @_[KERNEL, HEAP];

    # Tell the terminal to send me input as "got_term_input".
    $kernel->post(interface => send_me_input => "got_term_input");

    $kernel->yield("update_time");
    $kernel->yield("update_status");

    my $file_list = join " ", map {shorten_filename} @files;

    $vt->set_status_field($window_id, file => $file_list);

    #$kernel->yield(update_file => $file_list);

    # Start Following a File
    for my $file (@files) {

        # Use POE::Wheel::Run for remote files
        if ($file =~ m{^ \s* (?<host> [^:]+) : (?<path> .+) \s* $}x) {

            my $host = $+{host};
            my $path = $+{path};

            my $child = POE::Wheel::Run->new(
                Program     => [ssh_tail_file($host, $path)],
                StdoutEvent => "got_child_stdout",
                StderrEvent => "got_child_stderr",
                CloseEvent  => "got_child_close",
            );

            $_[KERNEL]->sig_child($child->PID, "got_child_signal");

            # Wheel events include the wheel's ID.
            $_[HEAP]{children_by_wid}{$child->ID} = $child;

            # Signal events include the process ID.
            $_[HEAP]{children_by_pid}{$child->PID} = $child;

        }
        else {
            $heap->{"wheel_$file"} = POE::Wheel::FollowTail->new(
                Filename     => $file,
                Driver       => POE::Driver::SysRW->new(),
                Filter       => POE::Filter::Line->new(),
                PollInterval => 1,
                InputEvent   => "input_tail",
                ErrorEvent   => \&error_tail,
                ResetEvent   => \&reset_tail,
            );
        }
    }
}

sub terminate_run_wheels {
    my ($kernel, $heap, $input, $exception) = @_[KERNEL, HEAP, ARG0, ARG1];

    my $heap = $_[HEAP];
    my $wheels_by_id = $heap->{children_by_wid};

    for my $wheel_id (keys %{ $wheels_by_id }) {
        my $wheel = delete $wheels_by_id->{$wheel_id};
        if (defined $wheel) {
            my $pid = $wheel->PID;
            my $killed = $wheel->kill(-15);
            $vt->print($window_id,"\0(stderr_text)killing $wheel wheel => $killed");
            delete $heap->{children_by_pid}->{$pid};
            undef $wheel;
        }
    }

    return;
}

### The main input handler for this program.  This would be supplied
### by the guts of the client program.

sub handle_term_input {
    my ($kernel, $heap, $input, $exception) = @_[KERNEL, HEAP, ARG0, ARG1];

    # Got an exception.  These are interrupt (^C) or quit (^\).
    if (defined $exception) {
        warn "got exception: $exception";
        terminate_run_wheels(@_);
        $vt->delete_window($window_id);
        goto SHUTDOWN;
    }

    if (! defined $input || $input eq "") {
        return;
    }

    if ($input =~ m{^/quit}i) {
        terminate_run_wheels(@_);
        $vt->delete_window($window_id);
        goto SHUTDOWN;
    }

    if ($input =~ m{^/grep \s* (?<pattern> .*) $}ix) {
        $search_pattern = $+{pattern};
        $vt->print($window_id,
            "\0(stderr_text)Search pattern changed to '$search_pattern'");
        $kernel->yield('update_status');
        if (!$search_pattern) {
            $search_pattern = undef;
        }
    }
    else {
        $vt->print($window_id, "\0(err_input)Unknown command '$input'");
        return;
    }

    #
    #  # Unknown command?
    #  warn "Unknown command: $cmd";
    #  return;
    #}

}

### Update the time on the status bar.

sub update_status {
    my ($kernel, $heap) = @_[KERNEL, HEAP];

    my $window_name = $vt->get_window_name($window_id);
    $vt->set_status_field(
        $window_id,
        name => $window_name,
        grep => $search_pattern || "",
    );

    $kernel->alarm(update_time => time() + 1);
}

sub update_time {
    my ($kernel, $heap) = @_[KERNEL, HEAP];

    # New time format.
    use POSIX qw(strftime);

    $vt->set_status_field($window_id, time => strftime("%I:%M %p", localtime));

    # Schedule another time update for the next minute.  This is more
    # accurate than using delay() because it schedules the update at the
    # beginning of the minute.
    $kernel->alarm(update_time => int(time() / 60) * 60 + 60);
}

sub update_file {
    my ($kernel, $file) = @_[KERNEL, ARG0];

    $vt->set_status_field($window_id, file => $file);
}

sub input_tail {
    my ($heap, $input, $wheel_id) = @_[HEAP, ARG0, ARG1];
    $vt->print($window_id, $input);
}

sub error_tail {
    my ($operation, $errnum, $errstr, $wheel_id) = @_[ARG0 .. ARG3];
    warn "Wheel $wheel_id generated $operation error $errnum: $errstr";
}

sub reset_tail {
    my $wheel_id = $_[ARG0];
    $vt->print($window_id, "Reset $wheel_id");
}

# --------------------------------------------- POE::Wheel::Run mechanics

# Wheel event, including the wheel's ID.
sub on_child_stdout {
    my ($stdout_line, $wheel_id) = @_[ARG0, ARG1];

    state $buffer     = [];
    state $last_print = [Time::HiRes::gettimeofday];

    my $child = $_[HEAP]{children_by_wid}{$wheel_id};

    #print "pid ", $child->PID, " STDOUT: $stdout_line\n";

    if (!defined $search_pattern
        || ($search_pattern && $stdout_line =~ qr{$search_pattern}x))
    {

        #$stdout_line =~ s{($search_pattern)}{"\0(st_values)$1\0(ncolor)"}xe;
        push @$buffer, "\0(ncolor)$stdout_line";

        my $buffer_is_full = scalar @{$buffer} > PRINT_BUFFER_SIZE;
        my $delay_elapsed  = Time::HiRes::tv_interval($last_print) > SCREEN_UPDATE_DELAY;

        if ($buffer_is_full || $delay_elapsed) {
            $vt->print($window_id, join("\n", @$buffer));
            @$buffer    = ();
            $last_print = [Time::HiRes::gettimeofday];
        }
    }
}

# Wheel event, including the wheel's ID.
sub on_child_stderr {
    my ($stderr_line, $wheel_id) = @_[ARG0, ARG1];
    my $child = $_[HEAP]{children_by_wid}{$wheel_id};
    $vt->print($window_id, "\0(stderr_text)" . $stderr_line);
}

# Wheel event, including the wheel's ID.
sub on_child_close {
    my $wheel_id = $_[ARG0];
    my $child    = delete $_[HEAP]{children_by_wid}{$wheel_id};

    # May have been reaped by on_child_signal().
    unless (defined $child) {
        $vt->print($window_id, "\0(stderr_text) tail pipe closed");
        return;
    }

    $vt->print($window_id, "\0(stderr_text) child " . $child->PID . " pipe closed");

    delete $_[HEAP]{children_by_pid}{$child->PID};
}

sub on_child_signal {

    #print "pid $_[ARG1] exited with status $_[ARG2].\n";
    $vt->print($window_id, "child pid " . $_[ARG1] . " exited with status " . $_[ARG2]);

    my $child = delete $_[HEAP]{children_by_pid}{$_[ARG1]};

    # May have been reaped by on_child_close().
    return unless defined $child;

    delete $_[HEAP]{children_by_wid}{$child->ID};
}

# --------------------------------------------- Main

$poe_kernel->run();

SHUTDOWN:

$vt->shutdown;
exit 0;

__END__

=pod

=head1 NAME

rtail - irssi-style local and remote file tailer

=head1 SYNOPSIS

    rtail --user root --file <filename> [--file <filename> ...]

C<< <filename> >> can be either:

=over 4

=item a local filename

Ex.: C</var/log/messages>

=item a remote filename, ssh-like syntax

Ex.: C<< <hostname>:<local-file-path> >>

=back

=head1 DESCRIPTION

C<rtail = tail + ssh + irc> means that rtail is a C<irssi>-like console
application to tail many local and remote files together.

Irc-style commands like C<< /grep <regex> >> allow to search and highlight
given patterns in the stream of tailed log files that are coming
from "the tubes".

More commands are planned.

=head2 MOTIVATION

This tool started from my frustration in combing production log files
from many different servers at the same time.

=head2 STATUS

The basic prototype is functional and usable.
The only commands right now are C</quit> and C</grep>.

I plan to expand this to allow arbitrary sources of data like
C<tcpflow> for example. That would be awesome.

The future's just a few night hacking sessions away :)

=head1 AUTHOR

Cosimo Streppone, cosimo@cpan.org

